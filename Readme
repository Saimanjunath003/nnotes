# Notes App

A modern, responsive notes application built with vanilla JavaScript, HTML, and Tailwind CSS. Features include note creation, editing, deletion, search functionality, pagination, and dark mode support.

## Features

- ‚ú® Create, edit, and delete notes
- üîç Search notes by title or content
- üìÑ Pagination for large note collections
- üåô Dark mode toggle
- üì± Responsive design
- üóÇÔ∏è Sort by date or title
- üé® Modern UI with smooth animations
- üíæ Mock API integration (with fallback for demo)

## How to Run the App

### Option 1: Direct File Opening
1. Clone or download the repository
2. Open `index.html` directly in your web browser
3. The app will work immediately with mock data

### Option 2: Local Server (Recommended)
1. Clone the repository:
   ```bash
   git clone <your-repo-url>
   cd notes-app
   ```

2. Start a local server:
   ```bash
   # Using Python 3
   python -m http.server 8000
   
   # Using Node.js (if you have http-server installed)
   npx http-server
   
   # Using PHP
   php -S localhost:8000
   ```

3. Open your browser and navigate to `http://localhost:8000`

### API Configuration
The app is configured to work with MockAPI.io. To use your own API endpoint:
1. Create a MockAPI.io project at https://mockapi.io/
2. Create a resource called "notes" with the following schema:
   - `id` (number, auto-generated)
   - `title` (string)
   - `content` (string)
   - `createdAt` (date)
3. Replace the `apiBase` URL in the JavaScript code with your MockAPI endpoint

## Project Structure

```
notes-app/
‚îú‚îÄ‚îÄ index.html          # Main application file
‚îú‚îÄ‚îÄ README.md          # This file
‚îî‚îÄ‚îÄ assets/            # (Optional) For future assets
```

## Technology Stack

- **Frontend**: Vanilla JavaScript (ES6+)
- **Styling**: Tailwind CSS (via CDN)
- **Icons**: Heroicons (embedded SVG)
- **API**: MockAPI.io (with offline fallback)

## Trade-offs and Assumptions Made

### Trade-offs
1. **Single File Architecture**: Chose to keep everything in one HTML file for simplicity and easy deployment, sacrificing modularity
2. **Vanilla JavaScript**: Used vanilla JS instead of a framework for lightweight delivery, but this means more manual DOM manipulation
3. **CDN Dependencies**: Used CDN for Tailwind CSS for quick setup, but this requires internet connectivity
4. **Mock API**: Used MockAPI.io for simplicity, but this limits real-world scalability
5. **No Build Process**: Avoided build tools for simplicity, but this limits optimization opportunities
6. **localStorage for Theme**: Used localStorage for dark mode preference, which might not work in all environments

### Assumptions
1. **Modern Browser Support**: Assumed ES6+ support (no IE compatibility)
2. **Internet Connectivity**: Required for Tailwind CSS and API calls
3. **Small to Medium Data Sets**: Pagination assumes reasonable performance with client-side filtering
4. **Single User**: No authentication or multi-user support
5. **Simple Note Structure**: Notes only contain title and content (no tags, categories, etc.)

## What I'd Do With More Time

### Immediate Improvements (1-2 days)
- **Component Architecture**: Break down into reusable JavaScript modules
- **Offline Support**: Implement service worker for offline functionality
- **Data Validation**: Add comprehensive input validation and error handling
- **Keyboard Shortcuts**: Add hotkeys for common actions (Ctrl+N for new note, etc.)
- **Auto-save**: Implement auto-save functionality while editing
- **Better Mobile UX**: Improve touch interactions and mobile-specific features

### Medium-term Enhancements (1 week)
- **Rich Text Editor**: Replace textarea with a rich text editor (e.g., Quill.js)
- **Note Categories/Tags**: Add categorization and tagging system
- **Export/Import**: Add ability to export notes as JSON/Markdown
- **Advanced Search**: Implement full-text search with filters
- **Note Templates**: Add predefined templates for different note types
- **Drag & Drop**: Implement drag-and-drop reordering

### Long-term Features (2+ weeks)
- **Real Backend**: Replace MockAPI with a proper backend (Node.js/Express, Django, etc.)
- **User Authentication**: Add user accounts and authentication
- **Collaboration**: Real-time collaborative editing
- **File Attachments**: Support for images and file attachments
- **Sync Across Devices**: Cloud synchronization
- **PWA Features**: Make it a full Progressive Web App
- **Plugins/Extensions**: Extensible architecture for third-party plugins

### Technical Improvements
- **Testing**: Add unit and integration tests (Jest, Cypress)
- **Build Process**: Implement webpack/Vite for optimization
- **TypeScript**: Convert to TypeScript for better type safety
- **Performance**: Implement virtual scrolling for large datasets
- **Accessibility**: Comprehensive ARIA labels and keyboard navigation
- **Internationalization**: Multi-language support

## API Endpoints

The app expects the following REST API endpoints:

- `GET /api/v1/notes` - Fetch all notes
- `POST /api/v1/notes` - Create a new note
- `PUT /api/v1/notes/:id` - Update a note
- `DELETE /api/v1/notes/:id` - Delete a note

### Note Schema
```json
{
  "id": "number",
  "title": "string",
  "content": "string",
  "createdAt": "ISO date string"
}
```

## Browser Compatibility

- Chrome 60+
- Firefox 55+
- Safari 12+
- Edge 79+

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## License

This project is open source and available under the [MIT License](LICENSE).
